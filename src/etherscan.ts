import axios from "axios";
import * as dotenv from "dotenv";
import * as fs from "fs";
import * as path from "path";

// Ã‡evresel deÄŸiÅŸkenleri yÃ¼kle
dotenv.config();

const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || "";
const WALLET_ADDRESS = "0x4e1b32cb147edfe07622c88b90f1ea0df00b6aed";

// ðŸ“Œ Log dizini (Bir Ã¼st klasÃ¶rde `logs/`)
const LOG_DIR = path.join(__dirname, "..", "logs");

// ðŸ“Œ Log dizini yoksa oluÅŸtur
if (!fs.existsSync(LOG_DIR)) {
    fs.mkdirSync(LOG_DIR, { recursive: true });
}

// ðŸ“Œ JSON dizini (Bir Ã¼st klasÃ¶rde `json/`)
const JSON_DIR = path.join(__dirname, "..", "json");

// ðŸ“Œ JSON dizini yoksa oluÅŸtur
if (!fs.existsSync(JSON_DIR)) {
    fs.mkdirSync(JSON_DIR, { recursive: true });
}

// ðŸ“Œ Tarih formatÄ±nÄ± oluÅŸtur (YYYY-MM-DD_HH-MM-SS)
const DATE = new Date().toISOString().replace(/[:]/g, "-").replace("T", "_").split(".")[0];
const LOG_FILE_PATH = path.join(LOG_DIR, `${WALLET_ADDRESS}-${DATE}.log`);
const JSON_FILE_PATH = path.join(JSON_DIR, `${WALLET_ADDRESS}-${DATE}.json`);

// ðŸ“Œ Log dosyasÄ±nÄ± temizle ve baÅŸlÄ±k ekle
fs.writeFileSync(LOG_FILE_PATH, `Ethereum Adresi: ${WALLET_ADDRESS}\nTarih: ${DATE.replace("_", " ")}\n\n`);

// ðŸ“Œ Log fonksiyonu (Sadece `../logs/` dizinine yazacak)
function logToFile(message: string) {
    fs.appendFileSync(LOG_FILE_PATH, message + "\n");
}

// ðŸ“Œ Basit Metin Tablo FormatÄ±nda Log Yazma
function logTableToFileSimple(headers: string[], rows: any[][]) {
    let tableString = "";

    // BaÅŸlÄ±klarÄ± ekleyelim
    tableString += headers.join(" | ") + "\n";
    tableString += "-".repeat(headers.join(" | ").length) + "\n";

    // SatÄ±rlarÄ± ekleyelim
    for (const row of rows) {
        tableString += row.join(" | ") + "\n";
    }

    // Log dosyasÄ±na ekle
    logToFile(tableString);
}

// ðŸ“Œ JSON formatÄ±nda veriyi kaydetme fonksiyonu
function logToJson(data: any) {
    let existingData: any[] = [];

    // EÄŸer dosya varsa, mevcut veriyi oku ve iÃ§ine ekle
    if (fs.existsSync(JSON_FILE_PATH)) {
        const fileContent = fs.readFileSync(JSON_FILE_PATH, "utf8");
        existingData = JSON.parse(fileContent);
    }

    // Yeni veriyi mevcut listeye ekleyerek gÃ¼ncelle
    existingData.push(data);

    // JSON dosyasÄ±na yaz
    fs.writeFileSync(JSON_FILE_PATH, JSON.stringify(existingData, null, 4));
}

// ðŸ“Œ JSON formatÄ±nda tablo yazdÄ±ran fonksiyon
function logTableToJson(headers: string[], rows: any[][], sectionName: string) {
    const tableData = rows.map(row => {
        let obj: { [key: string]: any } = {};
        headers.forEach((header, index) => {
            obj[header] = row[index];
        });
        return obj;
    });

    logToJson({ [sectionName]: tableData });
}

// ðŸ“Œ 1. ERC-20 Token Transferlerini Getir ve Dosyaya Yaz
async function fetchERC20Transfers() {
    try {
        const url = `https://api.etherscan.io/api?module=account&action=tokentx&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;
        const response = await axios.get(url);
        const transactions = response.data.result;

        if (transactions.length === 0) {
            logToFile("Bu adrese ait hiÃ§bir ERC-20 token transferi bulunamadÄ±.");
            logToJson({ message: "Bu adrese ait hiÃ§bir ERC-20 token transferi bulunamadÄ±." });
            return;
        }

        const rows = [];
        for (const tx of transactions) {
            rows.push([
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                `${tx.tokenName} (${tx.tokenSymbol})`,
                (parseFloat(tx.value) / Math.pow(10, tx.tokenDecimal)).toFixed(4),
                `https://etherscan.io/tx/${tx.hash}`
            ]);
        }

        logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "Token", "Miktar", "Tx Hash"], rows);
        logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "Token", "Miktar", "Tx Hash"], rows, "ERC20_Transactions");
    } catch (error) {
        logToFile("ERC-20 iÅŸlemleri alÄ±nÄ±rken hata oluÅŸtu: " + error);
        logToJson({ error: "ERC-20 iÅŸlemleri alÄ±nÄ±rken hata oluÅŸtu: " + error });
    }
}

// ðŸ“Œ 2. ERC-20 Token Bakiyelerini Getir ve Dosyaya Yaz
async function getAllERC20Tokens() {
    try {
        const response = await axios.get(
            `https://api.etherscan.io/api?module=account&action=tokentx&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`
        );
        const transactions = response.data.result;

        if (transactions.length === 0) {
            logToFile("Bu adrese ait hiÃ§bir ERC-20 iÅŸlemi bulunamadÄ±.");            
            logToJson({ message: "Bu adrese ait hiÃ§bir ERC-20 iÅŸlemi bulunamadÄ±." });
            return;
        }

        const uniqueTokens = new Set(transactions.map((tx: any) => tx.contractAddress));
        logToFile(`CÃ¼zdandaki ERC-20 Tokenler:\n`);        
        logToJson({ message: "CÃ¼zdandaki ERC-20 Tokenler:" });

        const rows = [];
        for (let tokenAddress of uniqueTokens) {
            const balance = await getTokenBalance(tokenAddress as string);
            const tokenInfo = transactions.find((tx: any) => tx.contractAddress === tokenAddress);
            if (tokenInfo) {
                rows.push([
                    tokenInfo.tokenName,
                    tokenInfo.tokenSymbol,
                    tokenAddress,
                    balance.toFixed(4)
                ]);
            }
        }

        logTableToFileSimple(["Token AdÄ±", "Sembol", "Token Adresi", "Bakiye"], rows);
        logTableToJson(["Token AdÄ±", "Sembol", "Token Adresi", "Bakiye"], rows, "ERC20_Transactions");
    } catch (error) {
        logToFile("ERC-20 tokenler alÄ±nÄ±rken hata oluÅŸtu: " + error);
        logToJson({ error: "ERC-20 tokenler alÄ±nÄ±rken hata oluÅŸtu: " + error });
    }
}

// ðŸ“Œ 2. Token Bakiye KontrolÃ¼
async function getTokenBalance(tokenContractAddress: string) {
    const url = `https://api.etherscan.io/api?module=account&action=tokenbalance&contractaddress=${tokenContractAddress}&address=${WALLET_ADDRESS}&tag=latest&apikey=${ETHERSCAN_API_KEY}`;

    try {
        const response = await axios.get(url);
        const balance = parseFloat(response.data.result) / Math.pow(10, 18);
        return balance;
    } catch (error) {
        const errorMessage = `${tokenContractAddress} adresi iÃ§in hata oluÅŸtu: ${error}`;
        logToFile(errorMessage);
        logToJson({ error: errorMessage });
        
        return 0;
    }
}

// ðŸ“Œ 3. NFT Transferlerini Getir ve Dosyaya Yaz
async function getNFTTransactions() {
    try {
        const url = `https://api.etherscan.io/api?module=account&action=tokennfttx&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;
        const response = await axios.get(url);
        const transactions = response.data.result;

        if (transactions.length === 0) {
            logToFile("Bu adrese ait hiÃ§bir NFT transferi bulunamadÄ±.");
            logToJson({ message: "Bu adrese ait hiÃ§bir NFT transferi bulunamadÄ±." });
            return;
        }

        const rows = [];
        for (const tx of transactions) {
            rows.push([
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                tx.tokenName,
                tx.tokenID,
                `https://etherscan.io/tx/${tx.hash}`
            ]);
        }

        logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "NFT AdÄ±", "NFT ID", "Tx Hash"], rows);
        logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "NFT AdÄ±", "NFT ID", "Tx Hash"], rows, "NFT_Transactions");
    } catch (error) {
        logToFile("NFT transferleri alÄ±nÄ±rken hata oluÅŸtu: " + error);
        logToJson({ error: "NFT transferleri alÄ±nÄ±rken hata oluÅŸtu: " + error });
    
    }
}

// ðŸ“Œ 4. ETH Bakiyesini Getir ve Dosyaya Yaz
async function getETHBalance() {
    const url = `https://api.etherscan.io/api?module=account&action=balance&address=${WALLET_ADDRESS}&tag=latest&apikey=${ETHERSCAN_API_KEY}`;

    try {
        const response = await axios.get(url);
        const balanceInWei = response.data.result;
        const balanceInETH = parseFloat(balanceInWei) / Math.pow(10, 18);
        logToFile(`CÃ¼zdan Bakiyesi: ${balanceInETH} ETH\n`);
        logToJson({ ETH_Balance: `${balanceInETH} ETH` });
    } catch (error) {
        logToFile("Bakiye alÄ±nÄ±rken hata oluÅŸtu: " + error);        
        logToJson({ error: "Bakiye alÄ±nÄ±rken hata oluÅŸtu: " + error });
    }
}

// ðŸ“Œ 5. ETH Transferlerini Getir ve Dosyaya Yaz
async function getETHTransactions() {
    const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;

    try {
        const response = await axios.get(url);
        const transactions = response.data.result;

        if (transactions.length === 0) {
            logToFile("Bu adrese ait hiÃ§bir ETH transferi bulunamadÄ±.");
            logToJson({ message: "Bu adrese ait hiÃ§bir ETH transferi bulunamadÄ±." });
            return;
        }

        const rows = [];
        for (const tx of transactions) {
            rows.push([
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                (parseFloat(tx.value) / Math.pow(10, 18)).toFixed(4),
                `https://etherscan.io/tx/${tx.hash}`
            ]);
        }

        logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "Miktar (ETH)", "Tx Hash"], rows);
        logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "Miktar", "Tx Hash"], rows, "ETH_Transactions");

    } catch (error) {
        logToFile("ETH transferleri alÄ±nÄ±rken hata oluÅŸtu: " + error);
        logToJson({ error: "ETH transferleri alÄ±nÄ±rken hata oluÅŸtu: " + error });
    }
}

// Ä°ÅŸlem tÃ¼rÃ¼nÃ¼ tanÄ±mlÄ±yoruz
interface EtherscanTransaction {
    blockNumber: string;
    timeStamp: string;
    hash: string;
    from: string;
    to: string;
    value: string;
    tokenName?: string;
    tokenSymbol?: string;
    tokenDecimal?: string;
    contractAddress?: string;
}

// Bilinen hacker adresleriyle iÅŸlem yapÄ±p yapmadÄ±ÄŸÄ±nÄ± kontrol eden fonksiyon
async function checkHackerInteractions() {
    const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;

    const hackerAddresses = new Set([
        "0x1234567890abcdef1234567890abcdef12345678",
        "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
    ]);

    try {
        const response = await axios.get(url);
        const transactions: EtherscanTransaction[] = response.data.result; // âœ… API'den dÃ¶nen veriyi tipliyoruz

        if (transactions.length === 0) {
            logToFile("Bu cÃ¼zdanÄ±n iÅŸlem geÃ§miÅŸi bulunamadÄ±.");            
            logToJson({ message: "Bu cÃ¼zdanÄ±n iÅŸlem geÃ§miÅŸi bulunamadÄ±." });
            return;
        }

        // âœ… Hacker adresleriyle eÅŸleÅŸen iÅŸlemleri filtrele
        const riskyTransactions = transactions.filter((tx: EtherscanTransaction) =>
            hackerAddresses.has(tx.from) || hackerAddresses.has(tx.to)
        );

        if (riskyTransactions.length > 0) {
            logToFile("Bu cÃ¼zdan hacker adresleriyle etkileÅŸimde bulunmuÅŸ!");            
            logToJson({ message: "Bu cÃ¼zdan hacker adresleriyle etkileÅŸimde bulunmuÅŸ!." });
            const rows = riskyTransactions.map((tx: EtherscanTransaction) => [
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                `https://etherscan.io/tx/${tx.hash}`
            ]);
            logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "Ä°ÅŸlem Linki"], rows);            
            logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "Ä°ÅŸlem Linki"], rows, "ERC20_Transactions");
        } else {
            logToFile("Bu cÃ¼zdan bilinen hacker adresleriyle etkileÅŸime girmemiÅŸ.");
            logToJson({ message: "Bu cÃ¼zdan bilinen hacker adresleriyle etkileÅŸime girmemiÅŸ." });
        }
    } catch (error) {
        logToFile("Hacker adres analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error);
        logToJson({ error: "Hacker adres analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error });
    }
}

async function checkTornadoCashUsage() {
    const tornadoCashContracts = new Set([
        "0x1111111254EEB25477B68fb85Ed929f73A960582", // Tornado Cash 0.1 ETH Pool
        "0x2222221254EEB25477B68fb85Ed929f73A960582"  // Tornado Cash 1 ETH Pool
    ]);

    const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;

    try {
        const response = await axios.get(url);
        const transactions = response.data.result;

        const mixerTransactions = transactions.filter((tx: EtherscanTransaction) =>
            tornadoCashContracts.has(tx.from) || tornadoCashContracts.has(tx.to)
        );

        if (mixerTransactions.length > 0) {
            logToFile("Bu cÃ¼zdan Tornado Cash ile etkileÅŸimde bulunmuÅŸ!");            
            logToJson({ message: "Bu cÃ¼zdan Tornado Cash ile etkileÅŸimde bulunmuÅŸ!" });
            const rows = mixerTransactions.map((tx: EtherscanTransaction) => [
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                `https://etherscan.io/tx/${tx.hash}`
            ]);
            logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "Ä°ÅŸlem Linki"], rows);
            logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "Ä°ÅŸlem Linki"], rows, "ERC20_Transactions");
        } else {
            logToFile("Bu cÃ¼zdan Tornado Cash kullanmamÄ±ÅŸ.");
            logToJson({ message: "Bu cÃ¼zdan Tornado Cash kullanmamÄ±ÅŸ." });
        }
    } catch (error) {
        logToFile("Tornado Cash analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error);
        logToJson({ error: "Tornado Cash analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error });
    }
}

async function checkDarknetAndScamTransactions() {

    const knownScamAddresses = new Set([
        "0x1234567890abcdef1234567890abcdef12345678", // Ã–rnek darknet adresi
        "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd", // Ã–rnek scam adresi
        "0x1111111254EEB25477B68fb85Ed929f73A960582", // Tornado Cash adresi (Mixer)
        "0x3333333333d37ECbc15C9353D55f4D9AB5e90c70", // Ã–rnek rug-pull projesi
        "0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef"  // Bilinen hacker cÃ¼zdanÄ±
    ]);
    const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${WALLET_ADDRESS}&startblock=0&endblock=99999999&sort=asc&apikey=${ETHERSCAN_API_KEY}`;

    try {
        const response = await axios.get(url);
        const transactions = response.data.result;

        if (transactions.length === 0) {
            logToFile("Bu cÃ¼zdanÄ±n iÅŸlem geÃ§miÅŸi bulunamadÄ±.");            
            logToJson({ message: "Bu cÃ¼zdanÄ±n iÅŸlem geÃ§miÅŸi bulunamadÄ±" });
            return;
        }

        // Bilinen scam & darknet adresleriyle eÅŸleÅŸen iÅŸlemleri filtrele
        const riskyTransactions = transactions.filter((tx: EtherscanTransaction) =>
            knownScamAddresses.has(tx.from) || knownScamAddresses.has(tx.to)
        );

        if (riskyTransactions.length > 0) {
            logToFile("Bu cÃ¼zdan scam & darknet adresleriyle etkileÅŸimde bulunmuÅŸ!");            
            logToJson({ message: "Bu cÃ¼zdan scam & darknet adresleriyle etkileÅŸimde bulunmuÅŸ!" });
            const rows = riskyTransactions.map((tx: EtherscanTransaction) => [
                tx.blockNumber,
                new Date(parseInt(tx.timeStamp) * 1000).toLocaleString(),
                tx.from,
                tx.to,
                (parseFloat(tx.value) / Math.pow(10, 18)).toFixed(4) + " ETH",
                `https://etherscan.io/tx/${tx.hash}`
            ]);
            logTableToFileSimple(["Blok", "Zaman", "Kimden", "Kime", "Miktar", "Tx Hash"], rows);
            logTableToJson(["Blok", "Zaman", "Kimden", "Kime", "Miktar", "Tx Hash"], rows, "ERC20_Transactions");
        } else {
            logToFile("Bu cÃ¼zdan scam & darknet adresleriyle etkileÅŸime girmemiÅŸ.");
            logToJson({ message: "Bu cÃ¼zdan scam & darknet adresleriyle etkileÅŸime girmemiÅŸ." });
        }
    } catch (error) {
        logToFile("Darknet & scam adres analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error);
        logToJson({ error: "Darknet & scam adres analizi sÄ±rasÄ±nda hata oluÅŸtu: " + error });

    }
}



// ðŸ“Œ TÃ¼m FonksiyonlarÄ± Ã‡aÄŸÄ±r
(async function () {
    await getETHBalance();
    await getAllERC20Tokens();
    await fetchERC20Transfers();
    await getNFTTransactions();
    await getETHTransactions();
    await checkHackerInteractions();
    await checkTornadoCashUsage();
    await checkDarknetAndScamTransactions();
})();
